/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   operation_finish_new_try                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: pfuchs <pfuchs@student.42.fr>              +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2022/04/17 22:33:22 by pfuchs            #+#    #+#             */
/*   Updated: 2022/04/26 02:20:21 by pfuchs           ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "operation.h"

#include "stack.h"
#include "sort_groups.h"

#include <stdio.h>

//send the push values here and fix it
static void step_value(t_group *d, t_stack *dst, t_stack *src, int group_id, int *rotation_count, int *push_count, int stack_size, int *pv)
{
	int	value;

	value = src->data[0];
	if (value != pv[0] && value != pv[1] && value != pv[2] && value != pv[3])
	{
		stack_rotate(src);
		return ;
	}
	stack_push(dst, src);
	(*push_count)++;
	if ((int)value >= (stack_size / 2))
	{
		if (value - dst->data[dst->data_size - 1] == 1)
		{
			if (dst->data[1] - value == 1)
			{
				stack_rotate(dst);
				(*rotation_count)++;
			}
			stack_rotate(dst);
			(*rotation_count)++;
		}
	}
	if (*push_count - *rotation_count >= 2)
	{
		if (dst->data[0] - dst->data[1] == 1)
			stack_swap(dst);
		if ((int)dst->data[0] - (int)dst->data[1] < -1)
			stack_swap(dst);
	}
}

static void	get_push_values(t_group *d, t_stack *src, int group_id, int *ret)
{
	int	nbr_count;
	int	i;
	int	sorted[4];

	nbr_count = 0;
	i = 0;
	while (nbr_count < d->group_sizes[group_id])
	{
		if (d->number_group[src->data[i]] == group_id)
		{
			stack_rotate(src);
			ret[nbr_count] = src->data[i];
			nbr_count++;
		}
		i++;
	}
	sort(ret, d->group_sizes[group_id]);
}

static void	sort(int *ret, int size)
{
	int	i;
	int	j;
	int	temp;

	i = 0;
	while (i < size - 1)
	{
		j = 0;
		while (j < size - 1)
		{
			if (ret[j] > ret[j + 1])
			{
				temp = ret[j];
				ret[j] = ret[i];
				ret[i] = temp;
			}
		}
		i++;
	}
}

static void finish_group(t_group *d, t_stack *dst, t_stack *src, int group_id)
{
	int	stack_size;
	int	rotation_counter;
	int	push_counter;
	int	push_values[4];

	stack_size = src->data_size;
	push_counter = 0;
	rotation_counter = 0;
	get_push_values(d, src, group_id, push_values);
	while (push_counter < d->group_sizes[group_id])
	{
		step_value(d, dst, src, group_id, &rotation_counter, &push_counter, stack_size);
	}
}

void	operation_finish(t_group *d, t_stack *dst, t_stack *src)
{
	int	i;
	i = 0;
	while (src->data_size)
	{
		finish_group(d, dst, src, i);
		i++;
	}
}
